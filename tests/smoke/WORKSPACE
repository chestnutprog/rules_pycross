workspace(
    name = "rules_pycross_smoke",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "ce259cbac2e94a6dff01aff9455dcc844c8af141503b02a09c2642695b7b873e",
    strip_prefix = "bazel-lib-1.37.0",
    url = "https://github.com/aspect-build/bazel-lib/releases/download/v1.37.0/bazel-lib-v1.37.0.tar.gz",
)

load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies")

aspect_bazel_lib_dependencies()

# CC toolchain

HERMETIC_CC_TOOLCHAIN_VERSION = "v2.1.2"

http_archive(
    name = "hermetic_cc_toolchain",
    sha256 = "28fc71b9b3191c312ee83faa1dc65b38eb70c3a57740368f7e7c7a49bedf3106",
    urls = [
        "https://mirror.bazel.build/github.com/uber/hermetic_cc_toolchain/releases/download/{0}/hermetic_cc_toolchain-{0}.tar.gz".format(HERMETIC_CC_TOOLCHAIN_VERSION),
        "https://github.com/uber/hermetic_cc_toolchain/releases/download/{0}/hermetic_cc_toolchain-{0}.tar.gz".format(HERMETIC_CC_TOOLCHAIN_VERSION),
    ],
)

load(
    "@hermetic_cc_toolchain//toolchain:defs.bzl",
    "URL_FORMAT_NIGHTLY",
    "URL_FORMAT_RELEASE",
    zig_toolchains = "toolchains",
)

zig_version = "0.11.0"

zig_host_platform_sha256 = {
    "linux-aarch64": "956eb095d8ba44ac6ebd27f7c9956e47d92937c103bf754745d0a39cdaa5d4c6",
    "linux-x86_64": "2d00e789fec4f71790a6e7bf83ff91d564943c5ee843c5fd966efc474b423047",
    "macos-aarch64": "c6ebf927bb13a707d74267474a9f553274e64906fd21bf1c75a20bde8cadf7b2",
    "macos-x86_64": "1c1c6b9a906b42baae73656e24e108fd8444bb50b6e8fd03e9e7a3f8b5f05686",
}

zig_toolchains(
    host_platform_sha256 = zig_host_platform_sha256,
    url_formats = [
        URL_FORMAT_RELEASE,
        URL_FORMAT_NIGHTLY,
    ],
    version = zig_version,
)

register_toolchains(
    "@zig_sdk//toolchain:linux_amd64_gnu.2.19",
    "@zig_sdk//toolchain:linux_arm64_gnu.2.28",
    "@zig_sdk//toolchain:darwin_amd64",
    "@zig_sdk//toolchain:darwin_arm64",
)

# Python

http_archive(
    name = "rules_python",
    sha256 = "9d04041ac92a0985e344235f5d946f71ac543f1b1565f2cdbc9a2aaee8adf55b",
    strip_prefix = "rules_python-0.26.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.26.0/rules_python-0.26.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "py_repositories", "python_register_multi_toolchains", "python_register_toolchains")

py_repositories()

python_register_multi_toolchains(
    name = "python",
    default_version = "3.12.0",
    python_versions = [
        "3.10.12",
        "3.11.6",
        "3.12.0",
    ],
    register_coverage_tool = True,
)

load("@python//3.12.0:defs.bzl", python_interpreter = "interpreter")

# Third-party deps

load("//third_party:repositories.bzl", third_party_repositories = "repositories")

third_party_repositories()

# Pycross

local_repository(
    name = "rules_pycross",
    path = "../..",
)

load("@rules_pycross//pycross:repositories.bzl", "rules_pycross_dependencies")

rules_pycross_dependencies(python_interpreter)

load("@rules_pycross//pycross:defs.bzl", "pkg_repo_model_pdm", "pkg_repo_model_poetry", "pycross_lock_file_repo", "pycross_pkg_repo", "pycross_register_for_python_toolchains")

pycross_register_for_python_toolchains(
    name = "pycross_toolchains",
    platforms = [
        "aarch64-apple-darwin",
        "x86_64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
    ],
    python_toolchains_repo = "@python",
)

load("@pycross_toolchains//:defs.bzl", "environments")

# pkg_repo with Poetry
pycross_pkg_repo(
    name = "poetry_pkg_repo",
    always_build_packages = [
        "regex",
        "zstandard",
    ],
    build_target_overrides = {
        "zstandard": "@//pdm:zstandard_build",
    },
    default_alias_single_version = True,
    lock_model = pkg_repo_model_poetry(
        lock_file = "@//:poetry.lock",
        project_file = "@//:pyproject.toml",
    ),
    package_build_dependencies = {
        "regex": [
            "setuptools",
            "wheel",
        ],
        "zstandard": [
            "setuptools",
            "wheel",
        ],
    },
    target_environments = environments,
)

load("@poetry_pkg_repo//:defs.bzl", poetry_pkg_install_deps = "install_deps")

poetry_pkg_install_deps()

# pkg_repo with PDM
pycross_pkg_repo(
    name = "pdm_pkg_repo",
    always_build_packages = [
        "regex",
        "zstandard",
    ],
    build_target_overrides = {
        "zstandard": "@//pdm:zstandard_build",
    },
    default_alias_single_version = True,
    lock_model = pkg_repo_model_pdm(
        lock_file = "@//:pdm.lock",
        project_file = "@//:pyproject.toml",
    ),
    package_build_dependencies = {
        "regex": [
            "setuptools",
            "wheel",
        ],
        "zstandard": [
            "setuptools",
            "wheel",
        ],
    },
    target_environments = environments,
)

load("@pdm_pkg_repo//:defs.bzl", pdm_pkg_install_deps = "install_deps")

pdm_pkg_install_deps()

# Lock repo for vended poetry lock
pycross_lock_file_repo(
    name = "poetry_lock_repo",
    lock_file = "//poetry:lock.bzl",
)

load("@poetry_lock_repo//:requirements.bzl", poetry_install_deps = "install_deps")

poetry_install_deps()

# Lock repo for vended poetry lock
pycross_lock_file_repo(
    name = "pdm_lock_repo",
    lock_file = "//pdm:lock.bzl",
)

load("@pdm_lock_repo//:requirements.bzl", pdm_install_deps = "install_deps")

pdm_install_deps()

# This just tests that we can register toolchains for single version python repos.
python_register_toolchains(
    name = "python_single",
    python_version = "3.12.0",
)

pycross_register_for_python_toolchains(
    name = "pycross_toolchains_single",
    platforms = [
        "aarch64-apple-darwin",
        "x86_64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
    ],
    python_toolchains_repo = "@python_single",
)
